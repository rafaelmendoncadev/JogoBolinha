// <auto-generated />
using System;
using JogoBolinha.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace JogoBolinha.Migrations
{
    [DbContext(typeof(GameDbContext))]
    partial class GameDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.8");

            modelBuilder.Entity("JogoBolinha.Models.Game.Ball", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("TEXT");

                    b.Property<int>("GameStateId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Position")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TubeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("GameStateId");

                    b.HasIndex("TubeId");

                    b.ToTable("Balls");
                });

            modelBuilder.Entity("JogoBolinha.Models.Game.GameMove", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BallColor")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("FromTubeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GameStateId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsUndone")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MoveNumber")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<int>("ToTubeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("GameStateId");

                    b.ToTable("GameMoves");
                });

            modelBuilder.Entity("JogoBolinha.Models.Game.GameSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("HintsUsed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LevelId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MovesUsed")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Score")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LevelId");

                    b.HasIndex("PlayerId", "LevelId");

                    b.ToTable("GameSessions");
                });

            modelBuilder.Entity("JogoBolinha.Models.Game.GameState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("HintsUsed")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LevelId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MovesCount")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Score")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("LevelId");

                    b.HasIndex("PlayerId");

                    b.ToTable("GameStates");
                });

            modelBuilder.Entity("JogoBolinha.Models.Game.Level", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BallsPerColor")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Colors")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Difficulty")
                        .HasColumnType("INTEGER");

                    b.Property<string>("InitialState")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("MinimumMoves")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SolutionMoves")
                        .HasColumnType("TEXT");

                    b.Property<int>("Tubes")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("Levels");
                });

            modelBuilder.Entity("JogoBolinha.Models.Game.Tube", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Capacity")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GameStateId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Position")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("GameStateId");

                    b.ToTable("Tubes");
                });

            modelBuilder.Entity("JogoBolinha.Models.User.Achievement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("Points")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RequiredValue")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Achievements");
                });

            modelBuilder.Entity("JogoBolinha.Models.User.Leaderboard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("GlobalRank")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("TEXT");

                    b.Property<int>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalScore")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WeeklyRank")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("WeeklyResetDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("WeeklyScore")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId")
                        .IsUnique();

                    b.HasIndex("TotalScore");

                    b.HasIndex("WeeklyScore");

                    b.ToTable("Leaderboards");
                });

            modelBuilder.Entity("JogoBolinha.Models.User.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Players");
                });

            modelBuilder.Entity("JogoBolinha.Models.User.PlayerAchievement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AchievementId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CurrentProgress")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UnlockedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AchievementId");

                    b.HasIndex("PlayerId");

                    b.ToTable("PlayerAchievements");
                });

            modelBuilder.Entity("JogoBolinha.Models.User.PlayerStats", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("HighestLevel")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("TEXT");

                    b.Property<int>("LevelsCompleted")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PerfectGames")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalGamesPlayed")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalHintsUsed")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalMovesUsed")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalScore")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("TotalTimePlayed")
                        .HasColumnType("TEXT");

                    b.Property<int>("WeeklyScore")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("WeeklyScoreResetDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId")
                        .IsUnique();

                    b.ToTable("PlayerStats");
                });

            modelBuilder.Entity("JogoBolinha.Models.Game.Ball", b =>
                {
                    b.HasOne("JogoBolinha.Models.Game.GameState", "GameState")
                        .WithMany("Balls")
                        .HasForeignKey("GameStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JogoBolinha.Models.Game.Tube", "Tube")
                        .WithMany("Balls")
                        .HasForeignKey("TubeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("GameState");

                    b.Navigation("Tube");
                });

            modelBuilder.Entity("JogoBolinha.Models.Game.GameMove", b =>
                {
                    b.HasOne("JogoBolinha.Models.Game.GameState", "GameState")
                        .WithMany("Moves")
                        .HasForeignKey("GameStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GameState");
                });

            modelBuilder.Entity("JogoBolinha.Models.Game.GameSession", b =>
                {
                    b.HasOne("JogoBolinha.Models.Game.Level", "Level")
                        .WithMany("GameSessions")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("JogoBolinha.Models.User.Player", "Player")
                        .WithMany("GameSessions")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Level");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("JogoBolinha.Models.Game.GameState", b =>
                {
                    b.HasOne("JogoBolinha.Models.Game.Level", "Level")
                        .WithMany()
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("JogoBolinha.Models.User.Player", "Player")
                        .WithMany("GameStates")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Level");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("JogoBolinha.Models.Game.Tube", b =>
                {
                    b.HasOne("JogoBolinha.Models.Game.GameState", "GameState")
                        .WithMany("Tubes")
                        .HasForeignKey("GameStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GameState");
                });

            modelBuilder.Entity("JogoBolinha.Models.User.Leaderboard", b =>
                {
                    b.HasOne("JogoBolinha.Models.User.Player", "Player")
                        .WithOne()
                        .HasForeignKey("JogoBolinha.Models.User.Leaderboard", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("JogoBolinha.Models.User.PlayerAchievement", b =>
                {
                    b.HasOne("JogoBolinha.Models.User.Achievement", "Achievement")
                        .WithMany("PlayerAchievements")
                        .HasForeignKey("AchievementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JogoBolinha.Models.User.Player", "Player")
                        .WithMany("PlayerAchievements")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Achievement");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("JogoBolinha.Models.User.PlayerStats", b =>
                {
                    b.HasOne("JogoBolinha.Models.User.Player", "Player")
                        .WithOne("Stats")
                        .HasForeignKey("JogoBolinha.Models.User.PlayerStats", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("JogoBolinha.Models.Game.GameState", b =>
                {
                    b.Navigation("Balls");

                    b.Navigation("Moves");

                    b.Navigation("Tubes");
                });

            modelBuilder.Entity("JogoBolinha.Models.Game.Level", b =>
                {
                    b.Navigation("GameSessions");
                });

            modelBuilder.Entity("JogoBolinha.Models.Game.Tube", b =>
                {
                    b.Navigation("Balls");
                });

            modelBuilder.Entity("JogoBolinha.Models.User.Achievement", b =>
                {
                    b.Navigation("PlayerAchievements");
                });

            modelBuilder.Entity("JogoBolinha.Models.User.Player", b =>
                {
                    b.Navigation("GameSessions");

                    b.Navigation("GameStates");

                    b.Navigation("PlayerAchievements");

                    b.Navigation("Stats");
                });
#pragma warning restore 612, 618
        }
    }
}
