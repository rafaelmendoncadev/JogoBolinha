@model List<JogoBolinha.Models.Game.Level>
@{
    ViewData["Title"] = "Seleção de Níveis";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="levels-container">
    <div class="levels-header">
        <h1><i class="fas fa-trophy"></i> Ball Sort Puzzle</h1>
        <p class="subtitle">Escolha um nível para começar a jogar</p>
    </div>

    <div class="levels-grid">
        @foreach (var level in Model)
        {
            <div class="level-card @GetDifficultyClass(level.Difficulty)" data-level="@level.Number">
                <div class="level-number">@level.Number</div>
                <div class="level-info">
                    <div class="difficulty">@GetDifficultyText(level.Difficulty)</div>
                    <div class="level-details">
                        <span class="detail"><i class="fas fa-palette"></i> @level.Colors cores</span>
                        <span class="detail"><i class="fas fa-vial"></i> @level.Tubes tubos</span>
                    </div>
                </div>
                <div class="level-actions">
                    <a href="@Url.Action("Play", "Game", new { levelNumber = level.Number })" class="btn btn-play">
                        <i class="fas fa-play"></i> Jogar
                    </a>
                </div>
                <div class="difficulty-indicator @level.Difficulty.ToString().ToLower()"></div>
            </div>
        }
        
        @* Add placeholder for more levels *@
        @for (int i = Model.Count + 1; i <= 20; i++)
        {
            <div class="level-card locked" data-level="@i">
                <div class="level-number">@i</div>
                <div class="level-info">
                    <div class="locked-text">
                        <i class="fas fa-lock"></i>
                        <span>Em breve</span>
                    </div>
                </div>
                <div class="difficulty-indicator unknown"></div>
            </div>
        }
    </div>

    <div class="levels-footer">
        <a href="@Url.Action("Index", "Home")" class="btn btn-outline-primary btn-lg">
            <i class="fas fa-home"></i> Menu Principal
        </a>
    </div>
</div>

@functions {
    string GetDifficultyClass(JogoBolinha.Models.Game.Difficulty difficulty)
    {
        return difficulty switch
        {
            JogoBolinha.Models.Game.Difficulty.Easy => "difficulty-easy",
            JogoBolinha.Models.Game.Difficulty.Medium => "difficulty-medium",
            JogoBolinha.Models.Game.Difficulty.Hard => "difficulty-hard",
            JogoBolinha.Models.Game.Difficulty.Expert => "difficulty-expert",
            _ => "difficulty-unknown"
        };
    }
    
    string GetDifficultyText(JogoBolinha.Models.Game.Difficulty difficulty)
    {
        return difficulty switch
        {
            JogoBolinha.Models.Game.Difficulty.Easy => "Fácil",
            JogoBolinha.Models.Game.Difficulty.Medium => "Médio",
            JogoBolinha.Models.Game.Difficulty.Hard => "Difícil",
            JogoBolinha.Models.Game.Difficulty.Expert => "Especialista",
            _ => "Desconhecido"
        };
    }
}

@section Styles {
    <style>
        .levels-container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        .levels-header {
            text-align: center;
            margin-bottom: 40px;
            padding: 20px;
        }

        .levels-header h1 {
            color: #333;
            font-size: 3rem;
            font-weight: bold;
            margin-bottom: 10px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.1);
        }

        .levels-header .subtitle {
            color: #666;
            font-size: 1.2rem;
            margin: 0;
        }

        .levels-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
            gap: 20px;
            margin-bottom: 40px;
        }

        .level-card {
            background: white;
            border-radius: 15px;
            padding: 20px;
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
            border: 2px solid transparent;
        }

        .level-card:hover:not(.locked) {
            transform: translateY(-5px);
            box-shadow: 0 8px 25px rgba(0,0,0,0.15);
        }

        .level-card.locked {
            opacity: 0.5;
            cursor: not-allowed;
        }

        .difficulty-indicator {
            position: absolute;
            top: 0;
            right: 0;
            width: 50px;
            height: 50px;
            clip-path: polygon(100% 0%, 0% 0%, 100% 100%);
        }

        .difficulty-indicator.easy { background: #28a745; }
        .difficulty-indicator.medium { background: #ffc107; }
        .difficulty-indicator.hard { background: #fd7e14; }
        .difficulty-indicator.expert { background: #dc3545; }
        .difficulty-indicator.unknown { background: #6c757d; }

        .level-number {
            font-size: 2.5rem;
            font-weight: bold;
            color: #333;
            text-align: center;
            margin-bottom: 15px;
        }

        .level-info {
            text-align: center;
            margin-bottom: 20px;
        }

        .difficulty {
            font-size: 1.1rem;
            font-weight: 600;
            margin-bottom: 10px;
            padding: 5px 15px;
            border-radius: 20px;
            display: inline-block;
        }

        .difficulty-easy .difficulty { color: #28a745; background: rgba(40, 167, 69, 0.1); }
        .difficulty-medium .difficulty { color: #ffc107; background: rgba(255, 193, 7, 0.1); }
        .difficulty-hard .difficulty { color: #fd7e14; background: rgba(253, 126, 20, 0.1); }
        .difficulty-expert .difficulty { color: #dc3545; background: rgba(220, 53, 69, 0.1); }

        .level-details {
            display: flex;
            justify-content: space-around;
            flex-wrap: wrap;
            gap: 10px;
        }

        .detail {
            display: inline-flex;
            align-items: center;
            gap: 5px;
            color: #666;
            font-size: 0.9rem;
        }

        .detail i {
            color: #007bff;
        }

        .level-actions {
            text-align: center;
        }

        .btn-play {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 12px 30px;
            border-radius: 25px;
            font-weight: 600;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 8px;
            transition: all 0.3s ease;
            border: none;
        }

        .btn-play:hover {
            color: white;
            transform: scale(1.05);
            box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
        }

        .locked-text {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 5px;
            color: #999;
        }

        .locked-text i {
            font-size: 1.5rem;
        }

        .levels-footer {
            text-align: center;
            margin-top: 30px;
        }

        /* Border colors for difficulty */
        .difficulty-easy { border-color: rgba(40, 167, 69, 0.3); }
        .difficulty-medium { border-color: rgba(255, 193, 7, 0.3); }
        .difficulty-hard { border-color: rgba(253, 126, 20, 0.3); }
        .difficulty-expert { border-color: rgba(220, 53, 69, 0.3); }

        /* Hover effects for borders */
        .level-card:hover.difficulty-easy { border-color: #28a745; }
        .level-card:hover.difficulty-medium { border-color: #ffc107; }
        .level-card:hover.difficulty-hard { border-color: #fd7e14; }
        .level-card:hover.difficulty-expert { border-color: #dc3545; }

        /* Responsive Design */
        @@media (max-width: 768px) {
            .levels-grid {
                grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
                gap: 15px;
            }
            
            .levels-header h1 {
                font-size: 2.5rem;
            }
            
            .level-number {
                font-size: 2rem;
            }
        }

        @@media (max-width: 480px) {
            .levels-container {
                padding: 10px;
            }
            
            .levels-grid {
                grid-template-columns: 1fr;
                gap: 10px;
            }
            
            .levels-header h1 {
                font-size: 2rem;
            }
            
            .level-card {
                padding: 15px;
            }
        }

        /* Animations */
        .level-card {
            animation: fadeInUp 0.6s ease-out;
        }

        @@keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(30px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        /* Staggered animation delay */
        .level-card:nth-child(1) { animation-delay: 0.1s; }
        .level-card:nth-child(2) { animation-delay: 0.2s; }
        .level-card:nth-child(3) { animation-delay: 0.3s; }
        .level-card:nth-child(4) { animation-delay: 0.4s; }
        .level-card:nth-child(5) { animation-delay: 0.5s; }
        .level-card:nth-child(6) { animation-delay: 0.6s; }
        .level-card:nth-child(7) { animation-delay: 0.7s; }
        .level-card:nth-child(8) { animation-delay: 0.8s; }
        .level-card:nth-child(9) { animation-delay: 0.9s; }
        .level-card:nth-child(10) { animation-delay: 1.0s; }
    </style>
}

@section Scripts {
    <script>
        $(document).ready(function() {
            // Add ripple effect to level cards
            $('.level-card:not(.locked)').on('click', function(e) {
                if (!$(e.target).is('.btn-play, .btn-play *')) {
                    const playButton = $(this).find('.btn-play');
                    if (playButton.length) {
                        window.location.href = playButton.attr('href');
                    }
                }
            });

            // Add hover sound effect (optional)
            $('.level-card:not(.locked)').on('mouseenter', function() {
                $(this).addClass('hovered');
            });

            $('.level-card').on('mouseleave', function() {
                $(this).removeClass('hovered');
            });
        });
    </script>
}