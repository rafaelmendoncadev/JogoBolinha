@model JogoBolinha.Models.ViewModels.SavedGamesListViewModel
@{
    ViewData["Title"] = "Meus Jogos Salvos";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="saved-games-page">
    <div class="page-header">
        <div class="header-content">
            <h1><i class="fas fa-save"></i> Meus Jogos Salvos</h1>
            <p class="subtitle">Gerencie e continue seus jogos salvos</p>
        </div>
        <div class="header-stats">
            <div class="stat-item">
                <span class="stat-number">@Model.TotalGames</span>
                <span class="stat-label">Total de Jogos</span>
            </div>
            <div class="stat-item">
                <span class="stat-number">@Model.Games.Count(g => g.Status == JogoBolinha.Models.Game.GameStatus.InProgress)</span>
                <span class="stat-label">Em Andamento</span>
            </div>
            <div class="stat-item">
                <span class="stat-number">@Model.Games.Count(g => g.Status == JogoBolinha.Models.Game.GameStatus.Completed)</span>
                <span class="stat-label">Completos</span>
            </div>
        </div>
    </div>

    <!-- Filter and Actions Bar -->
    <div class="actions-bar">
        <div class="filters">
            <a href="@Url.Action("SavedGames", new { filter = "all", page = 1 })" 
               class="filter-btn @(Model.Filter == "all" ? "active" : "")">
                Todos (@Model.TotalGames)
            </a>
            <a href="@Url.Action("SavedGames", new { filter = "inprogress", page = 1 })" 
               class="filter-btn @(Model.Filter == "inprogress" ? "active" : "")">
                Em Andamento
            </a>
            <a href="@Url.Action("SavedGames", new { filter = "completed", page = 1 })" 
               class="filter-btn @(Model.Filter == "completed" ? "active" : "")">
                Completos
            </a>
        </div>
        <div class="bulk-actions">
            <button class="btn btn-secondary" id="select-all">
                <i class="fas fa-check-square"></i> Selecionar Todos
            </button>
            <button class="btn btn-danger" id="delete-selected" disabled>
                <i class="fas fa-trash"></i> Excluir Selecionados
            </button>
            <button class="btn btn-warning" id="delete-old">
                <i class="fas fa-calendar"></i> Excluir Antigos (30+ dias)
            </button>
        </div>
    </div>

    <!-- Games Table -->
    @if (Model.Games.Any())
    {
        <div class="games-table-container">
            <table class="games-table">
                <thead>
                    <tr>
                        <th><input type="checkbox" id="select-all-checkbox"></th>
                        <th>Nível</th>
                        <th>Status</th>
                        <th>Progresso</th>
                        <th>Movimentos</th>
                        <th>Tempo de Jogo</th>
                        <th>Última Atividade</th>
                        <th>Ações</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var game in Model.Games)
                    {
                        <tr class="game-row" data-game-id="@game.Id">
                            <td>
                                <input type="checkbox" class="game-checkbox" value="@game.Id">
                            </td>
                            <td>
                                <div class="level-info">
                                    <strong>Nível @game.Level.Number</strong>
                                    <span class="difficulty-badge difficulty-@GetDifficultyClass(game.Level.Number)">
                                        @GetDifficultyName(game.Level.Number)
                                    </span>
                                </div>
                            </td>
                            <td>
                                <span class="status-badge status-@game.Status.ToString().ToLower()">
                                    @(game.Status == JogoBolinha.Models.Game.GameStatus.InProgress ? "Em Andamento" : 
                                      game.Status == JogoBolinha.Models.Game.GameStatus.Completed ? "Completo" : "Pausado")
                                </span>
                            </td>
                            <td>
                                <div class="progress-info">
                                    @{
                                        var completedTubes = CountCompletedTubes(game);
                                        var totalTubes = game.Tubes?.Count(t => t.Balls.Any()) ?? 0;
                                        var progressPercent = totalTubes > 0 ? (completedTubes * 100) / totalTubes : 0;
                                    }
                                    <div class="progress-bar">
                                        <div class="progress-fill" style="width: @progressPercent%"></div>
                                    </div>
                                    <span class="progress-text">@completedTubes/@totalTubes tubos (@progressPercent%)</span>
                                </div>
                            </td>
                            <td>
                                <span class="moves-count">@game.MovesCount</span>
                                @if (game.HintsUsed > 0)
                                {
                                    <small class="hints-used">(@game.HintsUsed dicas)</small>
                                }
                            </td>
                            <td>
                                <span class="time-played">
                                    @{
                                        var timePlayed = (game.LastModified ?? DateTime.UtcNow) - game.StartTime;
                                    }
                                    @timePlayed.ToString(@"hh\:mm\:ss")
                                </span>
                            </td>
                            <td>
                                <span class="last-activity" title="@game.LastModified?.ToString("dd/MM/yyyy HH:mm:ss")">
                                    @FormatLastActivity(game.LastModified ?? game.StartTime)
                                </span>
                            </td>
                            <td class="actions-cell">
                                @if (game.Status == JogoBolinha.Models.Game.GameStatus.InProgress)
                                {
                                    <a href="@Url.Action("Continue", "Game", new { gameStateId = game.Id })" 
                                       class="btn btn-sm btn-success" title="Continuar jogo">
                                        <i class="fas fa-play"></i>
                                    </a>
                                }
                                <button class="btn btn-sm btn-danger delete-game-btn" 
                                        data-game-id="@game.Id" 
                                        data-level="@game.Level.Number" 
                                        title="Excluir jogo">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <!-- Pagination -->
        @if (Model.TotalPages > 1)
        {
            <div class="pagination-container">
                <nav class="pagination">
                    @if (Model.CurrentPage > 1)
                    {
                        <a href="@Url.Action("SavedGames", new { filter = Model.Filter, page = Model.CurrentPage - 1 })" 
                           class="page-btn">
                            <i class="fas fa-chevron-left"></i> Anterior
                        </a>
                    }

                    @for (int i = Math.Max(1, Model.CurrentPage - 2); i <= Math.Min(Model.TotalPages, Model.CurrentPage + 2); i++)
                    {
                        <a href="@Url.Action("SavedGames", new { filter = Model.Filter, page = i })" 
                           class="page-btn @(i == Model.CurrentPage ? "active" : "")">
                            @i
                        </a>
                    }

                    @if (Model.CurrentPage < Model.TotalPages)
                    {
                        <a href="@Url.Action("SavedGames", new { filter = Model.Filter, page = Model.CurrentPage + 1 })" 
                           class="page-btn">
                            Próxima <i class="fas fa-chevron-right"></i>
                        </a>
                    }
                </nav>
            </div>
        }
    }
    else
    {
        <div class="no-games">
            <div class="no-games-icon">
                <i class="fas fa-gamepad"></i>
            </div>
            <h3>Nenhum jogo salvo encontrado</h3>
            <p>Comece a jogar para ver seus jogos salvos aqui!</p>
            <a href="@Url.Action("Index", "Home")" class="btn btn-primary">
                <i class="fas fa-play"></i> Começar a Jogar
            </a>
        </div>
    }
</div>

@functions {
    private int CountCompletedTubes(JogoBolinha.Models.Game.GameState gameState)
    {
        if (gameState.Tubes == null) return 0;
        
        return gameState.Tubes.Count(tube => 
        {
            if (!tube.Balls.Any()) return false;
            
            var balls = tube.Balls.OrderBy(b => b.Position).ToList();
            if (balls.Count != tube.Capacity) return false;
            
            return balls.All(b => b.Color == balls[0].Color);
        });
    }

    private string GetDifficultyClass(int levelNumber)
    {
        return levelNumber <= 10 ? "easy" : 
               levelNumber <= 30 ? "medium" : 
               levelNumber <= 50 ? "hard" : "expert";
    }

    private string GetDifficultyName(int levelNumber)
    {
        return levelNumber <= 10 ? "Fácil" : 
               levelNumber <= 30 ? "Médio" : 
               levelNumber <= 50 ? "Difícil" : "Expert";
    }

    private string FormatLastActivity(DateTime lastActivity)
    {
        var diff = DateTime.UtcNow - lastActivity;
        
        if (diff.TotalMinutes < 60)
            return $"{(int)diff.TotalMinutes} min atrás";
        else if (diff.TotalHours < 24)
            return $"{(int)diff.TotalHours}h atrás";
        else if (diff.TotalDays < 7)
            return $"{(int)diff.TotalDays} dias atrás";
        else
            return lastActivity.ToString("dd/MM/yyyy");
    }
}

@section Styles {
    <style>
        .saved-games-page {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        .page-header {
            display: flex;
            justify-content: space-between;
            align-items: flex-end;
            margin-bottom: 30px;
            padding-bottom: 20px;
            border-bottom: 1px solid #e9ecef;
        }

        .header-content h1 {
            color: #333;
            margin: 0 0 10px 0;
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .header-content h1 i {
            color: #007bff;
        }

        .subtitle {
            color: #6c757d;
            margin: 0;
        }

        .header-stats {
            display: flex;
            gap: 25px;
        }

        .stat-item {
            text-align: center;
        }

        .stat-number {
            display: block;
            font-size: 2rem;
            font-weight: bold;
            color: #007bff;
            line-height: 1;
        }

        .stat-label {
            display: block;
            font-size: 0.85rem;
            color: #6c757d;
            margin-top: 4px;
        }

        .actions-bar {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 25px;
            padding: 15px;
            background: white;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }

        .filters {
            display: flex;
            gap: 10px;
        }

        .filter-btn {
            padding: 8px 16px;
            border: 2px solid #e9ecef;
            border-radius: 8px;
            text-decoration: none;
            color: #495057;
            font-weight: 500;
            transition: all 0.2s ease;
        }

        .filter-btn:hover,
        .filter-btn.active {
            background: #007bff;
            border-color: #007bff;
            color: white;
            text-decoration: none;
        }

        .bulk-actions {
            display: flex;
            gap: 10px;
        }

        .bulk-actions .btn {
            padding: 8px 16px;
            font-size: 0.9rem;
            border-radius: 6px;
            border: none;
            display: flex;
            align-items: center;
            gap: 6px;
        }

        .games-table-container {
            background: white;
            border-radius: 10px;
            box-shadow: 0 2px 15px rgba(0,0,0,0.1);
            overflow: hidden;
        }

        .games-table {
            width: 100%;
            border-collapse: collapse;
        }

        .games-table th,
        .games-table td {
            padding: 15px;
            text-align: left;
            border-bottom: 1px solid #f8f9fa;
        }

        .games-table th {
            background: #f8f9fa;
            font-weight: 600;
            color: #495057;
            position: sticky;
            top: 0;
        }

        .game-row:hover {
            background: #f8f9fa;
        }

        .level-info {
            display: flex;
            flex-direction: column;
            gap: 5px;
        }

        .difficulty-badge {
            font-size: 0.7rem;
            padding: 2px 6px;
            border-radius: 10px;
            font-weight: 600;
            text-transform: uppercase;
        }

        .difficulty-easy { background: #d4edda; color: #155724; }
        .difficulty-medium { background: #fff3cd; color: #856404; }
        .difficulty-hard { background: #f8d7da; color: #721c24; }
        .difficulty-expert { background: #d1ecf1; color: #0c5460; }

        .status-badge {
            padding: 4px 8px;
            border-radius: 12px;
            font-size: 0.8rem;
            font-weight: 600;
        }

        .status-inprogress { background: #cce5ff; color: #004085; }
        .status-completed { background: #d4edda; color: #155724; }
        .status-paused { background: #f8d7da; color: #721c24; }

        .progress-info {
            display: flex;
            flex-direction: column;
            gap: 5px;
        }

        .progress-bar {
            width: 100px;
            height: 8px;
            background: #e9ecef;
            border-radius: 4px;
            overflow: hidden;
        }

        .progress-fill {
            height: 100%;
            background: #007bff;
            transition: width 0.3s ease;
        }

        .progress-text {
            font-size: 0.8rem;
            color: #6c757d;
        }

        .moves-count {
            font-weight: 600;
            color: #495057;
        }

        .hints-used {
            display: block;
            color: #6c757d;
            margin-top: 2px;
        }

        .time-played {
            font-family: 'Courier New', monospace;
            font-weight: 600;
            color: #495057;
        }

        .last-activity {
            color: #6c757d;
            font-size: 0.9rem;
        }

        .actions-cell {
            display: flex;
            gap: 5px;
        }

        .actions-cell .btn {
            padding: 6px 10px;
            border: none;
            border-radius: 4px;
            font-size: 0.8rem;
        }

        .pagination-container {
            margin-top: 30px;
            display: flex;
            justify-content: center;
        }

        .pagination {
            display: flex;
            gap: 8px;
        }

        .page-btn {
            padding: 8px 12px;
            border: 1px solid #dee2e6;
            border-radius: 6px;
            text-decoration: none;
            color: #495057;
            transition: all 0.2s ease;
        }

        .page-btn:hover,
        .page-btn.active {
            background: #007bff;
            border-color: #007bff;
            color: white;
            text-decoration: none;
        }

        .no-games {
            text-align: center;
            padding: 60px 20px;
            background: white;
            border-radius: 15px;
            box-shadow: 0 2px 15px rgba(0,0,0,0.1);
        }

        .no-games-icon i {
            font-size: 4rem;
            color: #6c757d;
            margin-bottom: 20px;
        }

        .no-games h3 {
            color: #495057;
            margin-bottom: 10px;
        }

        .no-games p {
            color: #6c757d;
            margin-bottom: 30px;
        }

        /* Notification System */
        .notification {
            position: fixed;
            top: -100px;
            right: 20px;
            background: white;
            padding: 15px 20px;
            border-radius: 8px;
            box-shadow: 0 4px 20px rgba(0,0,0,0.15);
            display: flex;
            align-items: center;
            gap: 10px;
            z-index: 10000;
            opacity: 0;
            transition: all 0.3s ease;
            border-left: 4px solid #007bff;
        }

        .notification-success {
            border-left-color: #28a745;
            background-color: #f8fff9;
        }

        .notification-success i {
            color: #28a745;
        }

        .notification-error {
            border-left-color: #dc3545;
            background-color: #fff8f8;
        }

        .notification-error i {
            color: #dc3545;
        }

        .notification span {
            color: #333;
            font-weight: 500;
        }

        /* Responsive Design */
        @@media (max-width: 768px) {
            .page-header {
                flex-direction: column;
                align-items: flex-start;
                gap: 20px;
            }

            .header-stats {
                width: 100%;
                justify-content: space-around;
            }

            .actions-bar {
                flex-direction: column;
                gap: 15px;
                align-items: flex-start;
            }

            .filters {
                width: 100%;
                justify-content: space-around;
            }

            .bulk-actions {
                width: 100%;
                justify-content: flex-start;
            }

            .games-table-container {
                overflow-x: auto;
            }

            .games-table {
                min-width: 800px;
            }

            .notification {
                right: 10px;
                left: 10px;
                max-width: calc(100% - 20px);
            }
        }
    </style>
}

@section Scripts {
    <script>
        $(document).ready(function() {
            // Select all functionality
            $('#select-all-checkbox').on('change', function() {
                $('.game-checkbox').prop('checked', this.checked);
                updateDeleteButton();
            });

            $('#select-all').on('click', function() {
                var allChecked = $('.game-checkbox:checked').length === $('.game-checkbox').length;
                $('.game-checkbox').prop('checked', !allChecked);
                $('#select-all-checkbox').prop('checked', !allChecked);
                updateDeleteButton();
            });

            $('.game-checkbox').on('change', function() {
                updateDeleteButton();
                updateSelectAllCheckbox();
            });

            function updateSelectAllCheckbox() {
                var totalCheckboxes = $('.game-checkbox').length;
                var checkedCheckboxes = $('.game-checkbox:checked').length;
                $('#select-all-checkbox').prop('checked', totalCheckboxes > 0 && totalCheckboxes === checkedCheckboxes);
            }

            function updateDeleteButton() {
                var hasChecked = $('.game-checkbox:checked').length > 0;
                $('#delete-selected').prop('disabled', !hasChecked);
            }

            // Delete individual game
            $('.delete-game-btn').on('click', function() {
                var gameId = $(this).data('game-id');
                var level = $(this).data('level');
                var $row = $(this).closest('.game-row');

                if (confirm(`Tem certeza que deseja excluir o jogo salvo do "Nível ${level}"? Esta ação não pode ser desfeita.`)) {
                    deleteGame(gameId, $row);
                }
            });

            // Delete selected games
            $('#delete-selected').on('click', function() {
                var selectedGames = $('.game-checkbox:checked').map(function() {
                    return parseInt($(this).val());
                }).get();

                if (selectedGames.length === 0) return;

                if (confirm(`Tem certeza que deseja excluir ${selectedGames.length} jogo(s) selecionado(s)? Esta ação não pode ser desfeita.`)) {
                    deleteMultipleGames(selectedGames);
                }
            });

            // Delete old games
            $('#delete-old').on('click', function() {
                if (confirm('Tem certeza que deseja excluir todos os jogos salvos com mais de 30 dias? Esta ação não pode ser desfeita.')) {
                    // This would require a separate endpoint
                    alert('Funcionalidade em desenvolvimento');
                }
            });

            function deleteGame(gameId, $row) {
                $.ajax({
                    url: '@Url.Action("DeleteSavedGame", "Profile")',
                    type: 'POST',
                    data: { gameStateId: gameId },
                    success: function(response) {
                        if (response.success) {
                            $row.fadeOut(300, function() {
                                $(this).remove();
                                
                                // Reload page if no more games
                                if ($('.game-row').length === 0) {
                                    location.reload();
                                }
                            });
                            showNotification('Jogo excluído com sucesso!', 'success');
                        } else {
                            showNotification(response.message || 'Erro ao excluir jogo.', 'error');
                        }
                    },
                    error: function() {
                        showNotification('Erro de conexão. Tente novamente.', 'error');
                    }
                });
            }

            function deleteMultipleGames(gameIds) {
                $.ajax({
                    url: '@Url.Action("DeleteMultipleSavedGames", "Profile")',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(gameIds),
                    success: function(response) {
                        if (response.success) {
                            // Remove selected rows
                            $('.game-checkbox:checked').each(function() {
                                $(this).closest('.game-row').fadeOut(300, function() {
                                    $(this).remove();
                                });
                            });
                            
                            setTimeout(function() {
                                if ($('.game-row').length === 0) {
                                    location.reload();
                                }
                            }, 400);
                            
                            showNotification(`${gameIds.length} jogo(s) excluído(s) com sucesso!`, 'success');
                        } else {
                            showNotification(response.message || 'Erro ao excluir jogos.', 'error');
                        }
                    },
                    error: function() {
                        showNotification('Erro de conexão. Tente novamente.', 'error');
                    }
                });
            }

            // Notification system (reuse from home page)
            function showNotification(message, type = 'info') {
                const notification = $(`
                    <div class="notification notification-${type}">
                        <i class="fas ${type === 'success' ? 'fa-check-circle' : 'fa-exclamation-triangle'}"></i>
                        <span>${message}</span>
                    </div>
                `);
                
                $('body').append(notification);
                
                notification.animate({
                    top: '20px',
                    opacity: 1
                }, 300);
                
                setTimeout(() => {
                    notification.animate({
                        top: '-100px',
                        opacity: 0
                    }, 300, function() {
                        $(this).remove();
                    });
                }, 3000);
            }
        });
    </script>
}